;
; File generated by cc65 v 2.18 - Git 24c8e3f
;
	.fopt		compiler,"cc65 v 2.18 - Git 24c8e3f"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.export		_g_ppu_addr
	.export		_g_ppu_data
	.export		_g_ppu_data_size
	.export		_ppu_reset_scroll
	.export		_ppu_enable
	.export		_ppu_write
	.export		_ppu_disable
	.import		_g_i

.segment	"BSS"

.segment	"ZEROPAGE"
_g_ppu_addr:
	.res	2,$00
_g_ppu_data:
	.res	2,$00
_g_ppu_data_size:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ ppu_reset_scroll (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ppu_reset_scroll: near

.segment	"CODE"

;
; PPU_SCROLL = 0x00;
;
	lda     #$00
	sta     $2005
;
; PPU_SCROLL = 0x00;
;
	sta     $2005
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ ppu_enable (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ppu_enable: near

.segment	"CODE"

;
; PPUCTRL_NMI_ON;         // enable NMIs
;
	lda     #$80
	sta     $2000
;
; PPUMASK_L8_SSHOW;       // show sprites at left most 8px
;
	lda     #$1E
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ ppu_write (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ppu_write: near

.segment	"CODE"

;
; PPU_ADDR = (unsigned char) (g_ppu_addr >> 8);
;
	ldx     _g_ppu_addr+1
	stx     $2006
;
; PPU_ADDR = (unsigned char) (g_ppu_addr);
;
	lda     _g_ppu_addr
	sta     $2006
;
; for (g_i = 0; g_i < g_ppu_data_size; ++g_i ) {
;
	lda     #$00
	sta     _g_i
L0032:	lda     _g_i
	cmp     _g_ppu_data_size
	bcs     L0026
;
; PPU_DATA = g_ppu_data[g_i];
;
	lda     _g_ppu_data
	ldx     _g_ppu_data+1
	ldy     _g_i
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     $2007
;
; for (g_i = 0; g_i < g_ppu_data_size; ++g_i ) {
;
	inc     _g_i
	jmp     L0032
;
; }
;
L0026:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ ppu_disable (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ppu_disable: near

.segment	"CODE"

;
; PPU_CTRL = 0x00;
;
	lda     #$00
	sta     $2000
;
; PPU_MASK = 0x00;
;
	sta     $2001
;
; }
;
	rts

.endproc

